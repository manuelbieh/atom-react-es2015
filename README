# Atom React ES2015 Snippets

Some very opinionated (= how <a href="https://www.github.com/manuelbieh">I</a> like it) React ES2015/2016/2017/Stage-0 snippets for Atom

## React Component Class `rc`→<kbd>tab</kbd>
```
import React, { PropTypes, Component } from 'react';

export default class ${1:MyComponent} extends Component {

    static propTypes = {
        ${2}
    };

    constructor(props) {
        super(props);
        this.state = {};
    }

    render() {
        return (
            ${3:<div></div>}
        );
    }

}
```

## React Component Class with Child Context `rcc`→<kbd>tab</kbd>
```
import React, { PropTypes, Component } from 'react';

export default class ${1:MyComponent} extends Component {

    static propTypes = {
        ${2}
    };

    static childContextTypes = {
        ${3}
    };

    constructor(props) {
        super(props);
        this.state = {};
    }

    getChildContext() {
        return {
            ${4}
        };
    }

    render() {
        return (
            ${5:<div></div>}
        );
    }

}
```

## React Functional Component `rfn`→<kbd>tab</kbd>
```
import React, { PropTypes } from 'react';

export default function ${1}(props) {
    return (
        ${2:<div>MyComponent</div>}
    );
}

${1}.propTypes = {
    ${3}
};
```

## React Functional Component with Context `rfnc`→<kbd>tab</kbd>
```
import React, { PropTypes } from 'react';

export default function ${1}(props, context) {
    return (
        ${2:<div>MyComponent</div>}
    );
}

${1}.propTypes = {
    ${3}
};

${1}.contextTypes = {
    ${4}
};
```

## Lifecycle Methods

There is a shortcut for each of React's lifecycle methods. Just use the first letters of the method's words. `componentDidMount` = `cdm`, `componentWillReceiveProps` = `cwrp`, etc. Since `componentWillUpdate` and `componentWillUnmount` share the same letters/abbreviation you need to use `cwun` for the latter.

## PropTypes

PropType shortcuts begin with `pt` (or `rpt` if you need `React.PropTypes…`) and end with a lowercase (if optional) or uppercase (if required) letter (or letters) indicating their type (a = array, o = object, oo = oneOf, etc.). Here is a full list:

| Shortcut | PropType |
|--------|--------|
| _`r`_`pts` | `PropTypes.string` |
| _`r`_`ptS` | `PropTypes.string.isRequired` |
| _`r`_`ptn` | `PropTypes.number` |
| _`r`_`ptN` | `PropTypes.number.isRequired` |
| _`r`_`pto` | `PropTypes.object` |
| _`r`_`ptO` | `PropTypes.object.isRequired` |
| _`r`_`pta` | `PropTypes.string` |
| _`r`_`ptA` | `PropTypes.string.isRequired` |
| _`r`_`ptany` | `PropTypes.string` |
| _`r`_`ptAny` | `PropTypes.string.isRequired` |
| _`r`_`ptb` | `PropTypes.bool` |
| _`r`_`ptB` | `PropTypes.bool.isRequired` |
| _`r`_`ptf` | `PropTypes.func` |
| _`r`_`ptF` | `PropTypes.func.isRequired` |
| _`r`_`ptsh` | `PropTypes.shape({${1}})` |
| _`r`_`ptSh` | `PropTypes.shape({${1}}).isRequired` |
| _`r`_`ptoo` | `PropTypes.oneOf([${1}])` |
| _`r`_`ptOo` | `PropTypes.oneOf([${1}]).isRequired` |
| _`r`_`ptoot` | `PropTypes.oneOfType([${1}])` |
| _`r`_`ptOot` | `PropTypes.oneOfType([${1}]).isRequired` |
| _`r`_`ptao` | `PropTypes.arrayOf(${1})` |
| _`r`_`ptAo` | `PropTypes.arrayOf(${1}).isRequired` |
| _`r`_`ptio` | `PropTypes.instanceOf(${1})` |
| _`r`_`ptIo` | `PropTypes.instanceOf(${1}).isRequired` |
| _`r`_`pte` | `PropTypes.element` |
| _`r`_`ptE` | `PropTypes.element.isRequired` |
| _`r`_`ptnode` | `PropTypes.node` |
| _`r`_`ptNode` | `PropTypes.node.isRequired` |
